📋 MASTER CHECKLIST (By Phases)

🔍 Phase 1: Data Collection & Exploration
Responsible: Dev A

 Explore NASA's SBDB Close Approach API
 Write API wrapper in Python using requests
 Set parameters: body=Earth, neo=true, diameter=true, fullname=true
 Fetch data over a long date range (1900-01-01 to 2100-01-01)
 Save raw JSON + convert to CSV using pandas
 Explore dataset fields: dist, v_rel, v_inf, diameter, h, cd, class
 Create Jupyter Notebook to display initial data stats
 Check missing values and handle them
🧪 Phase 2: Feature Engineering + ML Modeling
Responsible: Dev A

 Feature: Convert date (cd) to time-until-approach (days)
 Feature: Bin dist into categorical risk levels (close, medium, far)
 Feature: Normalize v_rel, h, and diameter
 Label: Define binary class – “Hazardous” vs “Not Hazardous” (e.g., dist < 0.01 AU and diameter > 0.15 km)
 Train/test split (80/20)
 Train baseline model: Logistic Regression / Decision Tree
 Train improved models: Random Forest, XGBoost, LightGBM
 Evaluate using F1 score, ROC-AUC, confusion matrix
 Save final model using joblib or pickle
 Generate predictions for upcoming 60-day NEOs
 Document model choices in a Markdown report
🖥️ Phase 3: Dashboard + API Integration
Responsible: Dev B

 Set up project structure: app/, models/, data/, notebooks/
 Fetch real-time data from API (live update mode or refresh button)
 Parse and preprocess live data for dashboard
 Load ML model from file
 Generate predictions for new close-approach events
 Visualize upcoming NEO events in a table
 Add filter: distance range, date range, velocity
 Add hazard prediction tag: 🟥 Hazardous, 🟩 Safe
 Plot:
 Distance vs Date (scatter)
 Diameter vs Distance (bubble plot)
 Velocity vs Approach Date (line chart)
 Add live clock, and countdown to next closest approach
 Add API refresh scheduler (every 6 hours or on click)
Tools: Streamlit or Dash (easier with Streamlit)

🌐 Phase 4: UI/UX Polish & Deployment
Responsible: Both

 Add a title section with NEOvision branding
 Add legends and color tags for predictions
 Add tooltips for terms like AU, H-magnitude, velocity
 Add link to source dataset (NASA API)
 Responsive design (mobile/tablet/web)
 Deploy on Streamlit Cloud, Render, or Heroku
 Create GitHub README with:
 Problem Statement
 Features
 Tech Stack
 Model Summary
 Deployment link
 Make a short demo video (GIF or Loom)
📦 Phase 5: Bonus Features (Optional but Awesome)
 Animate orbits or create orbital plots using Plotly 3D
 Add historical NEO data charts
 Integrate email alerts for high-risk events
 Allow CSV download of predicted results
 Compare your predictions vs NASA’s PHA labels
 Build a basic REST API using FastAPI or Flask to serve model predictions
🧾 Suggested Folder Structure

NEOvision/
│
├── data/
│   └── historical_neos.csv
├── models/
│   └── neo_classifier.pkl
├── notebooks/
│   └── exploration.ipynb
├── app/
│   └── dashboard.py (or app.py if Streamlit)
├── utils/
│   └── fetch_data.py
│   └── preprocess.py
│   └── predict.py
├── README.md
└── requirements.txt
